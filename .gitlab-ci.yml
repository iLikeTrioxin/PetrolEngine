# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
  - install
  - build-pending
  - build

install-job:
  stage: install
  script:
    - git submodule update --init --recursive

build-pending-job:
  stage: build-pending
  script:
    - export REPO="PetrolEngine"
    - export COMMIT_SHA=$CI_COMMIT_SHA
    - export CONTEXT="ci/gitlab"
    - export DESC="Pipeline pending on GitLab"
    - export URL=$CI_PIPELINE_URL
    - export STATE="pending"
    - python3 -c 'from github import Github;from os import getenv;Github(getenv("TOKEN")).get_user().get_repo(getenv("REPO")).get_commit(sha=getenv("COMMIT_SHA")).create_status(state=getenv("STATE"),target_url=getenv("URL"),description=getenv("DESC"),context=getenv("CONTEXT"))'

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake ..
    - make -j 2
    - echo "Compile complete."
  after-script:
    - export CONTEXT="ci/gitlab"
    - export COMMIT_SHA=$CI_COMMIT_SHA
    - export URL=$CI_PIPELINE_URL
    - export REPO="PetrolEngine"
    - if [ $CI_JOB_STATUS == success ]; then export DESC="Pipeline passed on GitLab"; else export DESC="Pipeline failed on GitLab"; fi
    - if [ $CI_JOB_STATUS == success ]; then export STATE="success"                 ; else export STATE="failure"                 ; fi
    - python3 -c 'from github import Github;from os import getenv;Github(getenv("TOKEN")).get_user().get_repo(getenv("REPO")).get_commit(sha=getenv("COMMIT_SHA")).create_status(state=getenv("STATE"),target_url=getenv("URL"),description=getenv("DESC"),context=getenv("CONTEXT"))'

